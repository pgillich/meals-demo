openapi: 3.0.0
info:
  description: This is demo for a foodstore (meals) service
  version: 1.0.0
  title: OpenAPI Foodstore
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: meal
    description: Everything about your Meals
  - name: info
    description: Providing info about service
  - name: user
    description: Operations about user
paths:
  /login:
    post:
      description: Returns token for authorized User
      tags:
        - user
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInfo"
        description: Login Payload
        required: true
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccess"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "404":
          description: User not found
          content:
            "*/*":
              schema:
                type: string
        "500":
          description: Server error
          content:
            "*/*":
              schema:
                type: string
  "/meal/{id}":
    post:
      tags:
        - meal
      summary: Create a new meal
      description: the ID at the end of path is needed, but skipped
      operationId: createMeal
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          description: ID for generator workaround
          required: true
          schema:
            type: integer
            format: int64
            default: -1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meal"
        description: Meal object that needs to be created
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meal"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    put:
      tags:
        - meal
      summary: Update an existing meal
      description: the ID at the end of path is needed, but skipped
      operationId: updateMeal
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          description: ID for generator workaround
          required: true
          schema:
            type: integer
            format: int64
            default: -1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meal"
        description: Mea object that needs to be updated
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meal"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    get:
      tags:
        - meal
      summary: Find meal by ID
      description: Returns a single meal
      operationId: getMealById
      parameters:
        - name: id
          in: path
          description: ID of meal to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meal"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    delete:
      tags:
        - meal
      summary: Deletes a meal
      description: ""
      operationId: deleteMeal
      security:
        - JWT: []
      parameters:
        - name: id
          in: path
          description: Meal id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /meal/findByTag:
    get:
      tags:
        - meal
      summary: Finds Meals by tag
      description: One tag ID can be provided
      operationId: findMealsByTag
      parameters:
        - name: tag
          in: query
          description: Tag to filter by
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Meal"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /tags:
    get:
      tags:
        - meal
      summary: Get all tags
      description: All tags are stored
      operationId: getTags
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        "500":
          description: Invalid tag value
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /ingredients:
    get:
      tags:
        - meal
      summary: Get all ingredients
      description: ll ingredients are stored
      operationId: getIngredients
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ingredient"
        "500":
          description: Invalid tag value
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /livez:
    get:
      tags:
        - info
      summary: Liveness status for orchestrator
      description: Returns OK
      operationId: getLivez
      responses:
        "200":
          description: successful operation
  /version:
    get:
      tags:
        - info
      summary: Version
      description: Version anf build info
      operationId: getVersion
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
servers:
  - url: http://foodstore.kind-01.company.com/v1
components:
  securitySchemes:
    JWT:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    User:
      type: object
      required:
      - email
      - fullName
      - password
      properties:
        email:
          type: string
        fullName:
          type: string
        password:
          type: string
    LoginInfo:
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string
        password:
          type: string
    LoginSuccess:
      type: object
      required:
      - success
      - token
      properties:
        success:
          type: boolean
        token:
          type: string
    Tag:
      title: Meal Tag
      description: A tag for a meal
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: integer
          format: int64
          x-oapi-codegen-extra-tags: 
            gorm: "primaryKey"
        name:
          type: string
    Ingredient:
      title: Meal Ingredient
      description: An ingredient for a meal
      type: object
      required:
      - id
      - name
      - description
      properties:
        id:
          type: integer
          format: int64
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey"
        name:
          type: string
        description:
          type: string
    Meal:
      title: Meal
      description: A meal
      type: object
      required:
      - id
      - name
      - price
      - ingredients
      - pictureUrl
      - tags
      - description
      - kcal
      properties:
        id:
          type: integer
          format: int64
          x-oapi-codegen-extra-tags: 
            gorm: "primaryKey"
        name:
          type: string
          x-oapi-codegen-extra-tags: 
            valid: "customNameValidator"
        price:
          type: number
        ingredients:
          type: array
          x-oapi-codegen-extra-tags: 
            gorm: "many2many:meal_ingredients"
          items:
            $ref: "#/components/schemas/Ingredient"
        pictureUrl:
          type: string
        tags:
          type: array
          x-oapi-codegen-extra-tags: 
            gorm: "many2many:meal_tags"
          items:
            $ref: "#/components/schemas/Tag"
        description:
          type: string
        kcal:
          type: number
    Version:
      title: Version
      description: Version and build info
      type: object
      required:
      - version
      - buildTime
      - appName
      - goMod
      properties:
        version:
          type: string
        buildTime:
          type: string
        appName:
          type: string
        goMod:
          type: string
    ApiError:
      type: object
      required:
      - message
      properties:
        message:
          type: string
