// Code generated by go-swagger; DO NOT EDIT.

package meal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pgillich/meals-demo/internal/models"
)

// UpdateMealOKCode is the HTTP code returned for type UpdateMealOK
const UpdateMealOKCode int = 200

/*UpdateMealOK successful operation

swagger:response updateMealOK
*/
type UpdateMealOK struct {

	/*
	  In: Body
	*/
	Payload *models.Meal `json:"body,omitempty"`
}

// NewUpdateMealOK creates UpdateMealOK with default headers values
func NewUpdateMealOK() *UpdateMealOK {

	return &UpdateMealOK{}
}

// WithPayload adds the payload to the update meal o k response
func (o *UpdateMealOK) WithPayload(payload *models.Meal) *UpdateMealOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update meal o k response
func (o *UpdateMealOK) SetPayload(payload *models.Meal) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateMealOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateMealInternalServerErrorCode is the HTTP code returned for type UpdateMealInternalServerError
const UpdateMealInternalServerErrorCode int = 500

/*UpdateMealInternalServerError Error

swagger:response updateMealInternalServerError
*/
type UpdateMealInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIError `json:"body,omitempty"`
}

// NewUpdateMealInternalServerError creates UpdateMealInternalServerError with default headers values
func NewUpdateMealInternalServerError() *UpdateMealInternalServerError {

	return &UpdateMealInternalServerError{}
}

// WithPayload adds the payload to the update meal internal server error response
func (o *UpdateMealInternalServerError) WithPayload(payload *models.APIError) *UpdateMealInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update meal internal server error response
func (o *UpdateMealInternalServerError) SetPayload(payload *models.APIError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateMealInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
