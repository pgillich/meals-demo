// Code generated by go-swagger; DO NOT EDIT.

package meal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindMealsByTagHandlerFunc turns a function with the right signature into a find meals by tag handler
type FindMealsByTagHandlerFunc func(FindMealsByTagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindMealsByTagHandlerFunc) Handle(params FindMealsByTagParams) middleware.Responder {
	return fn(params)
}

// FindMealsByTagHandler interface for that can handle valid find meals by tag params
type FindMealsByTagHandler interface {
	Handle(FindMealsByTagParams) middleware.Responder
}

// NewFindMealsByTag creates a new http.Handler for the find meals by tag operation
func NewFindMealsByTag(ctx *middleware.Context, handler FindMealsByTagHandler) *FindMealsByTag {
	return &FindMealsByTag{Context: ctx, Handler: handler}
}

/* FindMealsByTag swagger:route GET /meal/findByTag meal findMealsByTag

Finds Meals by tag

One tag ID can be provided

*/
type FindMealsByTag struct {
	Context *middleware.Context
	Handler FindMealsByTagHandler
}

func (o *FindMealsByTag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindMealsByTagParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
