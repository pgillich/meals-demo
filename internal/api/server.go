// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all ingredients
	// (GET /ingredients)
	GetIngredients(w http.ResponseWriter, r *http.Request)
	// Liveness status for orchestrator
	// (GET /livez)
	GetLivez(w http.ResponseWriter, r *http.Request)

	// (POST /login)
	Login(w http.ResponseWriter, r *http.Request)
	// Finds Meals by tag
	// (GET /meal/findByTag)
	FindMealsByTag(w http.ResponseWriter, r *http.Request, params FindMealsByTagParams)
	// Deletes a meal
	// (DELETE /meal/{id})
	DeleteMeal(w http.ResponseWriter, r *http.Request, id int64)
	// Find meal by ID
	// (GET /meal/{id})
	GetMealById(w http.ResponseWriter, r *http.Request, id int64)
	// Create a new meal
	// (POST /meal/{id})
	CreateMeal(w http.ResponseWriter, r *http.Request, id int64)
	// Update an existing meal
	// (PUT /meal/{id})
	UpdateMeal(w http.ResponseWriter, r *http.Request, id int64)
	// Get all tags
	// (GET /tags)
	GetTags(w http.ResponseWriter, r *http.Request)
	// Version
	// (GET /version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetIngredients operation middleware
func (siw *ServerInterfaceWrapper) GetIngredients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIngredients(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLivez operation middleware
func (siw *ServerInterfaceWrapper) GetLivez(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLivez(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindMealsByTag operation middleware
func (siw *ServerInterfaceWrapper) FindMealsByTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindMealsByTagParams

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindMealsByTag(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeal operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeal(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, JWTScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeal(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMealById operation middleware
func (siw *ServerInterfaceWrapper) GetMealById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMealById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeal operation middleware
func (siw *ServerInterfaceWrapper) CreateMeal(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, JWTScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeal(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateMeal operation middleware
func (siw *ServerInterfaceWrapper) UpdateMeal(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, JWTScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMeal(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTags(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ingredients", wrapper.GetIngredients)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/livez", wrapper.GetLivez)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/meal/findByTag", wrapper.FindMealsByTag)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/meal/{id}", wrapper.DeleteMeal)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/meal/{id}", wrapper.GetMealById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/meal/{id}", wrapper.CreateMeal)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/meal/{id}", wrapper.UpdateMeal)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.GetTags)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/version", wrapper.GetVersion)
	})

	return r
}

type GetIngredientsRequestObject struct {
}

type GetIngredientsResponseObject interface {
	VisitGetIngredientsResponse(w http.ResponseWriter) error
}

type GetIngredients200JSONResponse []Ingredient

func (response GetIngredients200JSONResponse) VisitGetIngredientsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIngredients500JSONResponse ApiError

func (response GetIngredients500JSONResponse) VisitGetIngredientsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLivezRequestObject struct {
}

type GetLivezResponseObject interface {
	VisitGetLivezResponse(w http.ResponseWriter) error
}

type GetLivez200Response struct {
}

func (response GetLivez200Response) VisitGetLivezResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse LoginSuccess

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login400JSONResponse ApiError

func (response Login400JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Login404AsteriskResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response Login404AsteriskResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type Login500AsteriskResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response Login500AsteriskResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(500)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type FindMealsByTagRequestObject struct {
	Params FindMealsByTagParams
}

type FindMealsByTagResponseObject interface {
	VisitFindMealsByTagResponse(w http.ResponseWriter) error
}

type FindMealsByTag200JSONResponse []Meal

func (response FindMealsByTag200JSONResponse) VisitFindMealsByTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindMealsByTag500JSONResponse ApiError

func (response FindMealsByTag500JSONResponse) VisitFindMealsByTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMealRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteMealResponseObject interface {
	VisitDeleteMealResponse(w http.ResponseWriter) error
}

type DeleteMeal200Response struct {
}

func (response DeleteMeal200Response) VisitDeleteMealResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteMeal401JSONResponse ApiError

func (response DeleteMeal401JSONResponse) VisitDeleteMealResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMeal500JSONResponse ApiError

func (response DeleteMeal500JSONResponse) VisitDeleteMealResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMealByIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetMealByIdResponseObject interface {
	VisitGetMealByIdResponse(w http.ResponseWriter) error
}

type GetMealById200JSONResponse Meal

func (response GetMealById200JSONResponse) VisitGetMealByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMealById500JSONResponse ApiError

func (response GetMealById500JSONResponse) VisitGetMealByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateMealRequestObject struct {
	Id   int64 `json:"id"`
	Body *CreateMealJSONRequestBody
}

type CreateMealResponseObject interface {
	VisitCreateMealResponse(w http.ResponseWriter) error
}

type CreateMeal200JSONResponse Meal

func (response CreateMeal200JSONResponse) VisitCreateMealResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateMeal401JSONResponse ApiError

func (response CreateMeal401JSONResponse) VisitCreateMealResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateMeal500JSONResponse ApiError

func (response CreateMeal500JSONResponse) VisitCreateMealResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMealRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateMealJSONRequestBody
}

type UpdateMealResponseObject interface {
	VisitUpdateMealResponse(w http.ResponseWriter) error
}

type UpdateMeal200JSONResponse Meal

func (response UpdateMeal200JSONResponse) VisitUpdateMealResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMeal401JSONResponse ApiError

func (response UpdateMeal401JSONResponse) VisitUpdateMealResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMeal500JSONResponse ApiError

func (response UpdateMeal500JSONResponse) VisitUpdateMealResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsRequestObject struct {
}

type GetTagsResponseObject interface {
	VisitGetTagsResponse(w http.ResponseWriter) error
}

type GetTags200JSONResponse []Tag

func (response GetTags200JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTags500JSONResponse ApiError

func (response GetTags500JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200JSONResponse Version

func (response GetVersion200JSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all ingredients
	// (GET /ingredients)
	GetIngredients(ctx context.Context, request GetIngredientsRequestObject) (GetIngredientsResponseObject, error)
	// Liveness status for orchestrator
	// (GET /livez)
	GetLivez(ctx context.Context, request GetLivezRequestObject) (GetLivezResponseObject, error)

	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Finds Meals by tag
	// (GET /meal/findByTag)
	FindMealsByTag(ctx context.Context, request FindMealsByTagRequestObject) (FindMealsByTagResponseObject, error)
	// Deletes a meal
	// (DELETE /meal/{id})
	DeleteMeal(ctx context.Context, request DeleteMealRequestObject) (DeleteMealResponseObject, error)
	// Find meal by ID
	// (GET /meal/{id})
	GetMealById(ctx context.Context, request GetMealByIdRequestObject) (GetMealByIdResponseObject, error)
	// Create a new meal
	// (POST /meal/{id})
	CreateMeal(ctx context.Context, request CreateMealRequestObject) (CreateMealResponseObject, error)
	// Update an existing meal
	// (PUT /meal/{id})
	UpdateMeal(ctx context.Context, request UpdateMealRequestObject) (UpdateMealResponseObject, error)
	// Get all tags
	// (GET /tags)
	GetTags(ctx context.Context, request GetTagsRequestObject) (GetTagsResponseObject, error)
	// Version
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetIngredients operation middleware
func (sh *strictHandler) GetIngredients(w http.ResponseWriter, r *http.Request) {
	var request GetIngredientsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIngredients(ctx, request.(GetIngredientsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIngredients")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIngredientsResponseObject); ok {
		if err := validResponse.VisitGetIngredientsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetLivez operation middleware
func (sh *strictHandler) GetLivez(w http.ResponseWriter, r *http.Request) {
	var request GetLivezRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLivez(ctx, request.(GetLivezRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLivez")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLivezResponseObject); ok {
		if err := validResponse.VisitGetLivezResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(w http.ResponseWriter, r *http.Request) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// FindMealsByTag operation middleware
func (sh *strictHandler) FindMealsByTag(w http.ResponseWriter, r *http.Request, params FindMealsByTagParams) {
	var request FindMealsByTagRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindMealsByTag(ctx, request.(FindMealsByTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindMealsByTag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindMealsByTagResponseObject); ok {
		if err := validResponse.VisitFindMealsByTagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteMeal operation middleware
func (sh *strictHandler) DeleteMeal(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteMealRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMeal(ctx, request.(DeleteMealRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMeal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteMealResponseObject); ok {
		if err := validResponse.VisitDeleteMealResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetMealById operation middleware
func (sh *strictHandler) GetMealById(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetMealByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMealById(ctx, request.(GetMealByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMealById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMealByIdResponseObject); ok {
		if err := validResponse.VisitGetMealByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateMeal operation middleware
func (sh *strictHandler) CreateMeal(w http.ResponseWriter, r *http.Request, id int64) {
	var request CreateMealRequestObject

	request.Id = id

	var body CreateMealJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMeal(ctx, request.(CreateMealRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMeal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateMealResponseObject); ok {
		if err := validResponse.VisitCreateMealResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UpdateMeal operation middleware
func (sh *strictHandler) UpdateMeal(w http.ResponseWriter, r *http.Request, id int64) {
	var request UpdateMealRequestObject

	request.Id = id

	var body UpdateMealJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMeal(ctx, request.(UpdateMealRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMeal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateMealResponseObject); ok {
		if err := validResponse.VisitUpdateMealResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetTags operation middleware
func (sh *strictHandler) GetTags(w http.ResponseWriter, r *http.Request) {
	var request GetTagsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTags(ctx, request.(GetTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTagsResponseObject); ok {
		if err := validResponse.VisitGetTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(w http.ResponseWriter, r *http.Request) {
	var request GetVersionRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx, request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		if err := validResponse.VisitGetVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
